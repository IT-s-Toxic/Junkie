import re
import logging
import os
import time
from telethon import events, functions
from telethon.errors import (
    ChatAdminRequiredError,
    RPCError,
    ChatWriteForbiddenError
)
from pymongo import MongoClient

from utils.config import LOGCHANNEL, MONGODB_URI, DB_NAME
from utils.misc import register_help

logger = logging.getLogger(__name__)

def init(client):
    register_help("invite_link", {
        "–î–∂–∞–Ω–∫–∏, —Å—Å—ã–ª–∫—É": "–°–æ–∑–¥–∞—ë—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    })
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ vars.yaml
    mongo_client = MongoClient(MONGODB_URI)
    db = mongo_client[DB_NAME]
    active_invites_col = db['active_invites']
    
    @client.on(events.NewMessage(pattern=re.compile(r"(?i)^–¥–∂–∞–Ω–∫–∏,\s*—Å—Å—ã–ª–∫—É\s*$")))
    async def create_invite_link(event):
        sender_id = event.sender_id
        chat = await event.get_chat()
        
        try:
            participant = await client(functions.channels.GetParticipantRequest(
                channel=chat,
                participant='me'
            ))
            permissions = participant.participant.admin_rights
            if not (permissions and permissions.invite_users):
                await event.reply("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                logger.warning(f"–ë–æ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat.id}.")
                return
        except ChatAdminRequiredError:
            await event.reply("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            logger.error(f"ChatAdminRequiredError –≤ —á–∞—Ç–µ {chat.id}.")
            return
        except RPCError as e:
            await event.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            logger.error(f"RPCError: {e}")
            return
        except Exception as e:
            await event.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤.")
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            return
        
        try:
            invite = await client(functions.messages.ExportChatInviteRequest(
                peer=chat,
                expire_date=None,
                usage_limit=1
            ))
            invite_link = invite.link
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {invite_link}")
        except Exception as e:
            await event.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            return
        
        active_invites_col.insert_one({
            "invite_link": invite_link,
            "requester_id": sender_id,
            "chat_id": chat.id,
            "created_at": time.time()
        })
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {invite_link}")
        
        try:
            user = await client.get_entity(sender_id)
            await client.send_message(user, f"–í–æ—Ç –≤–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {invite_link}")
            await event.reply(f"–ù—É —á—Ç–æ, {user.first_name}, –≤–æ—Ç —Ç–≤–æ—è –≤–æ–ª—à–µ–±–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞–¥–µ—é—Å—å, —Ç—ã –µ—ë –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—à—å... —Å–Ω–æ–≤–∞.")
            logger.info(f"–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender_id}")
        except ChatWriteForbiddenError:
            await event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ—Ö–æ–∂–µ, —Ç—ã —Ä–µ—à–∏–ª, —á—Ç–æ —è –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞—é —Ç–≤–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.")
            logger.error(f"ChatWriteForbiddenError –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender_id}.")
            return
        except RPCError as e:
            await event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É. –í–∏–¥–∏–º–æ, —É –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ—É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å.")
            logger.error(f"RPCError: {e}")
            return
        except Exception as e:
            await event.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return
        
        if LOGCHANNEL:
            try:
                requester = await client.get_entity(sender_id)
                log_msg = (
                    f"üì® **–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è**\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{requester.first_name}](tg://user?id={sender_id}) "
                    f"—Å–æ–∑–¥–∞–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç [{chat.title}](https://t.me/c/{abs(chat.id)}/)."
                )
                await client.send_message(LOGCHANNEL, log_msg, link_preview=False)
                logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ {invite_link}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    @client.on(events.ChatAction)
    async def handle_new_join(event):
        if not event.user_added or not event.user_id:
            return
        
        logger.debug(f"–ù–æ–≤–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.user_id} –≤ —á–∞—Ç {event.chat_id}")
        
        active_invite = active_invites_col.find_one({"chat_id": event.chat_id})
        if active_invite:
            used_invite = active_invite["invite_link"]
            requester_id = active_invite["requester_id"]
            try:
                new_user = await client.get_entity(event.user_id)
                requester = await client.get_entity(requester_id)
                log_msg = (
                    f"‚úÖ **–°—Å—ã–ª–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{new_user.first_name}](tg://user?id={event.user_id}) "
                    f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É [{event.chat.title}](https://t.me/c/{abs(event.chat.id)}/) "
                    f"–ø–æ —Å—Å—ã–ª–∫–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–π [{requester.first_name}](tg://user?id={requester_id})."
                )
                await client.send_message(LOGCHANNEL, log_msg, link_preview=False)
                logger.info(f"–°—Å—ã–ª–∫–∞ {used_invite} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {event.user_id}")
                
                await client(functions.messages.DeleteChatInviteRequest(
                    peer=event.chat_id,
                    link=used_invite
                ))
                logger.info(f"–°—Å—ã–ª–∫–∞ {used_invite} —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
            
            active_invites_col.delete_one({"invite_link": used_invite})
            logger.debug(f"–°—Å—ã–ª–∫–∞ {used_invite} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            logger.warning(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —á–∞—Ç–∞ {event.chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
